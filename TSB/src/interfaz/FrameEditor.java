/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaz;

import db.Diccionario;
import java.io.File;
import java.sql.SQLException;
import java.util.Iterator;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import negocio.Palabra;
import negocio.TextFile;

/**
 *
 * @author marcela.tartabini
 */
public class FrameEditor extends javax.swing.JFrame {

    private final DefaultListModel lstModelFile;
    //private final DefaultTableModel tableModel;

    /**
     * Creates new form Editor
     */
    public FrameEditor() {
        initComponents();
        lstModelFile = new DefaultListModel();
        //tableModel = new DefaultTableModel();
        jlstArchivos.setModel(lstModelFile);
        //jtbPalabras.setModel(tableModel);
        jpbProgress.setVisible(false);
        try {
            Diccionario dic = new Diccionario();
            dic.iniciar();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    "Error en la base de datos: " + ex.getMessage());
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null,
                    "No se encontr√≥ el driver: " + ex.getMessage());
        }
        TableWorker worker = new TableWorker(jtbPalabras, "");
        worker.execute();
        jtfFiltro.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                actualizarTabla();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                actualizarTabla();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                actualizarTabla();
            }
        });

    }
    
    private void actualizarTabla() {
        String palabra = jtfFiltro.getText();
        TableWorker worker = new TableWorker(jtbPalabras, palabra);
        worker.execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form FrameEditor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbtnGenerar = new javax.swing.JButton();
        jpbProgress = new javax.swing.JProgressBar();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlstArchivos = new javax.swing.JList<>();
        jbtnAgregar = new javax.swing.JButton();
        jbtnLimpiar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jtfFiltro = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtbPalabras = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jbtnGenerar.setText("Generar");
        jbtnGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnGenerarActionPerformed(evt);
            }
        });

        jlstArchivos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jlstArchivos);

        jbtnAgregar.setText("Agregar...");
        jbtnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAgregarActionPerformed(evt);
            }
        });

        jbtnLimpiar.setText("Limpiar");
        jbtnLimpiar.setPreferredSize(new java.awt.Dimension(80, 29));
        jbtnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnLimpiarActionPerformed(evt);
            }
        });

        jLabel1.setText("Archivos seleccionados:");

        jtfFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfFiltroActionPerformed(evt);
            }
        });

        jtbPalabras.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(jtbPalabras);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpbProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jbtnAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbtnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbtnGenerar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtfFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jbtnAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbtnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addComponent(jbtnGenerar))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jpbProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnGenerarActionPerformed

        FileWorker worker = new FileWorker(lstModelFile, jtbPalabras, jpbProgress);
        worker.execute();
        actualizarTabla();


    }//GEN-LAST:event_jbtnGenerarActionPerformed

    private void jbtnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAgregarActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setAcceptAllFileFilterUsed(false);
        jfc.setFileFilter(new FilterTxt());
        int ret = jfc.showOpenDialog(this);
        if (ret != JFileChooser.CANCEL_OPTION) {
            lstModelFile.addElement(jfc.getSelectedFile());
        }
    }//GEN-LAST:event_jbtnAgregarActionPerformed

    private void jbtnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnLimpiarActionPerformed
        lstModelFile.clear();
    }//GEN-LAST:event_jbtnLimpiarActionPerformed

    private void jtfFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfFiltroActionPerformed
        String palabra = jtfFiltro.getText();
        TableWorker worker = new TableWorker(jtbPalabras, palabra);
        worker.execute();
    }//GEN-LAST:event_jtfFiltroActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new FrameEditor().setVisible(true);
        });
    }

    private class FilterTxt extends FileFilter {

        @Override
        public boolean accept(File f) {
            return f.getName().endsWith(".txt") || f.isDirectory();
        }

        @Override
        public String getDescription() {
            return "Text files";
        }
    }

    private class FileWorker extends SwingWorker<Integer, Integer> {

        private final DefaultListModel entrada;
        private final JTable salida;
        private final JProgressBar progreso;

        public FileWorker(DefaultListModel archivo, JTable salida,
                JProgressBar progreso) {
            this.entrada = archivo;
            this.salida = salida;
            this.progreso = progreso;
        }

        @Override
        protected Integer doInBackground() {
            progreso.setVisible(true);

            int n = entrada.getSize();
            String nombre;
            Iterator<Palabra> it;
            Diccionario dic = new Diccionario();
            for (int i = 0; i < n; i++) {
                TextFile archivo = new TextFile(
                        new File(entrada.get(i).toString()));
                archivo.procesar();
                nombre = archivo.getPath();
                it = archivo.getPalabras();
                publish((i + 1) * 50 / n);

                try {
                    dic.procesarArchivo(nombre, it);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(FrameEditor.this,
                            "Error en la base de datos: " + ex.getMessage());
                }
                publish((i + 1) * 100 / n);
            }
            return 1;
        }

        @Override
        protected void done() {
            JOptionPane.showMessageDialog(FrameEditor.this,
                    "Archivos procesados con √©xito");
            entrada.clear();
            progreso.setVisible(false);
        }

        @Override
        protected void process(List<Integer> chunks) {
            progreso.setValue(chunks.get(chunks.size() - 1));
        }
    }

    private class TableWorker extends SwingWorker<Integer, Void> {

        private final JTable tabla;
        private final String palabra;

        public TableWorker(JTable tabla, String palabra) {
            this.tabla = tabla;
            this.palabra = palabra;
        }

        @Override
        protected Integer doInBackground() throws Exception {
            DefaultTableModel tbm;
            try {
                Diccionario dic = new Diccionario();
                if ("".equals(palabra)) {
                    tbm = dic.consultarPalabras();
                } else {
                    tbm = dic.consultarPalabras(palabra);
                }
                tabla.setModel(tbm);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null,
                        "Error en la base de datos: " + ex.getMessage());
            }
            return 1;
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbtnAgregar;
    private javax.swing.JButton jbtnGenerar;
    private javax.swing.JButton jbtnLimpiar;
    private javax.swing.JList<String> jlstArchivos;
    private javax.swing.JProgressBar jpbProgress;
    private javax.swing.JTable jtbPalabras;
    private javax.swing.JTextField jtfFiltro;
    // End of variables declaration//GEN-END:variables
}
